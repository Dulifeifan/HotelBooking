//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace HotelBooking.Data
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class HotelBookingMVCContext : DbContext
    {
        public HotelBookingMVCContext()
            : base("name=HotelBookingMVCContext")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Booking> Bookings { get; set; }
        public virtual DbSet<Room> Rooms { get; set; }
    
        public virtual ObjectResult<GetAllRooms_Result> GetAllRooms()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllRooms_Result>("GetAllRooms");
        }
    
        public virtual ObjectResult<GetRoomByACType_Result> GetRoomByACType(string aCType)
        {
            var aCTypeParameter = aCType != null ?
                new ObjectParameter("ACType", aCType) :
                new ObjectParameter("ACType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetRoomByACType_Result>("GetRoomByACType", aCTypeParameter);
        }
    
        public virtual ObjectResult<GetRoomByBedType_Result> GetRoomByBedType(string bedType)
        {
            var bedTypeParameter = bedType != null ?
                new ObjectParameter("BedType", bedType) :
                new ObjectParameter("BedType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetRoomByBedType_Result>("GetRoomByBedType", bedTypeParameter);
        }
    
        public virtual ObjectResult<GetRoomByEnabled_Result> GetRoomByEnabled()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetRoomByEnabled_Result>("GetRoomByEnabled");
        }
    
        public virtual ObjectResult<GetRoomById_Result> GetRoomById(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetRoomById_Result>("GetRoomById", idParameter);
        }
    
        public virtual ObjectResult<GetRoomByRoomNumber_Result> GetRoomByRoomNumber(Nullable<int> roomNumber)
        {
            var roomNumberParameter = roomNumber.HasValue ?
                new ObjectParameter("RoomNumber", roomNumber) :
                new ObjectParameter("RoomNumber", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetRoomByRoomNumber_Result>("GetRoomByRoomNumber", roomNumberParameter);
        }
    
        public virtual ObjectResult<GetRoomByRoomType_Result> GetRoomByRoomType(string roomType)
        {
            var roomTypeParameter = roomType != null ?
                new ObjectParameter("RoomType", roomType) :
                new ObjectParameter("RoomType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetRoomByRoomType_Result>("GetRoomByRoomType", roomTypeParameter);
        }
    
        public virtual ObjectResult<GetRoomBy3Types_Result> GetRoomBy3Types(string roomType, string bedType, string aCType)
        {
            var roomTypeParameter = roomType != null ?
                new ObjectParameter("RoomType", roomType) :
                new ObjectParameter("RoomType", typeof(string));
    
            var bedTypeParameter = bedType != null ?
                new ObjectParameter("BedType", bedType) :
                new ObjectParameter("BedType", typeof(string));
    
            var aCTypeParameter = aCType != null ?
                new ObjectParameter("ACType", aCType) :
                new ObjectParameter("ACType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetRoomBy3Types_Result>("GetRoomBy3Types", roomTypeParameter, bedTypeParameter, aCTypeParameter);
        }
    
        public virtual ObjectResult<GetRoomByRoomTypeAndACType_Result> GetRoomByRoomTypeAndACType(string roomType, string aCType)
        {
            var roomTypeParameter = roomType != null ?
                new ObjectParameter("RoomType", roomType) :
                new ObjectParameter("RoomType", typeof(string));
    
            var aCTypeParameter = aCType != null ?
                new ObjectParameter("ACType", aCType) :
                new ObjectParameter("ACType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetRoomByRoomTypeAndACType_Result>("GetRoomByRoomTypeAndACType", roomTypeParameter, aCTypeParameter);
        }
    
        public virtual ObjectResult<GetRoomByRoomTypeAndBedType_Result> GetRoomByRoomTypeAndBedType(string roomType, string bedType)
        {
            var roomTypeParameter = roomType != null ?
                new ObjectParameter("RoomType", roomType) :
                new ObjectParameter("RoomType", typeof(string));
    
            var bedTypeParameter = bedType != null ?
                new ObjectParameter("BedType", bedType) :
                new ObjectParameter("BedType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetRoomByRoomTypeAndBedType_Result>("GetRoomByRoomTypeAndBedType", roomTypeParameter, bedTypeParameter);
        }
    
        public virtual int AddANewRoom(Nullable<int> roomNumber, string roomType, string bedType, string aCType, Nullable<decimal> price, Nullable<bool> enabled)
        {
            var roomNumberParameter = roomNumber.HasValue ?
                new ObjectParameter("RoomNumber", roomNumber) :
                new ObjectParameter("RoomNumber", typeof(int));
    
            var roomTypeParameter = roomType != null ?
                new ObjectParameter("RoomType", roomType) :
                new ObjectParameter("RoomType", typeof(string));
    
            var bedTypeParameter = bedType != null ?
                new ObjectParameter("BedType", bedType) :
                new ObjectParameter("BedType", typeof(string));
    
            var aCTypeParameter = aCType != null ?
                new ObjectParameter("ACType", aCType) :
                new ObjectParameter("ACType", typeof(string));
    
            var priceParameter = price.HasValue ?
                new ObjectParameter("Price", price) :
                new ObjectParameter("Price", typeof(decimal));
    
            var enabledParameter = enabled.HasValue ?
                new ObjectParameter("Enabled", enabled) :
                new ObjectParameter("Enabled", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddANewRoom", roomNumberParameter, roomTypeParameter, bedTypeParameter, aCTypeParameter, priceParameter, enabledParameter);
        }
    
        public virtual int DeleteARoom(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteARoom", iDParameter);
        }
    
        public virtual ObjectResult<GetFilteredRoomsByMode_Result> GetFilteredRoomsByMode(Nullable<int> mode, string roomType, string bedType, string aCType, Nullable<bool> enabled)
        {
            var modeParameter = mode.HasValue ?
                new ObjectParameter("Mode", mode) :
                new ObjectParameter("Mode", typeof(int));
    
            var roomTypeParameter = roomType != null ?
                new ObjectParameter("RoomType", roomType) :
                new ObjectParameter("RoomType", typeof(string));
    
            var bedTypeParameter = bedType != null ?
                new ObjectParameter("BedType", bedType) :
                new ObjectParameter("BedType", typeof(string));
    
            var aCTypeParameter = aCType != null ?
                new ObjectParameter("ACType", aCType) :
                new ObjectParameter("ACType", typeof(string));
    
            var enabledParameter = enabled.HasValue ?
                new ObjectParameter("Enabled", enabled) :
                new ObjectParameter("Enabled", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetFilteredRoomsByMode_Result>("GetFilteredRoomsByMode", modeParameter, roomTypeParameter, bedTypeParameter, aCTypeParameter, enabledParameter);
        }
    
        public virtual int UpdateARoom(Nullable<int> iD, Nullable<int> roomNumber, string roomType, string bedType, string aCType, Nullable<decimal> price, Nullable<bool> enabled)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var roomNumberParameter = roomNumber.HasValue ?
                new ObjectParameter("RoomNumber", roomNumber) :
                new ObjectParameter("RoomNumber", typeof(int));
    
            var roomTypeParameter = roomType != null ?
                new ObjectParameter("RoomType", roomType) :
                new ObjectParameter("RoomType", typeof(string));
    
            var bedTypeParameter = bedType != null ?
                new ObjectParameter("BedType", bedType) :
                new ObjectParameter("BedType", typeof(string));
    
            var aCTypeParameter = aCType != null ?
                new ObjectParameter("ACType", aCType) :
                new ObjectParameter("ACType", typeof(string));
    
            var priceParameter = price.HasValue ?
                new ObjectParameter("Price", price) :
                new ObjectParameter("Price", typeof(decimal));
    
            var enabledParameter = enabled.HasValue ?
                new ObjectParameter("Enabled", enabled) :
                new ObjectParameter("Enabled", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateARoom", iDParameter, roomNumberParameter, roomTypeParameter, bedTypeParameter, aCTypeParameter, priceParameter, enabledParameter);
        }
    
        public virtual ObjectResult<GetFilteredRoomsByModeAndDate_Result> GetFilteredRoomsByModeAndDate(Nullable<int> mode, string roomType, string bedType, string aCType, Nullable<bool> enabled, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var modeParameter = mode.HasValue ?
                new ObjectParameter("Mode", mode) :
                new ObjectParameter("Mode", typeof(int));
    
            var roomTypeParameter = roomType != null ?
                new ObjectParameter("RoomType", roomType) :
                new ObjectParameter("RoomType", typeof(string));
    
            var bedTypeParameter = bedType != null ?
                new ObjectParameter("BedType", bedType) :
                new ObjectParameter("BedType", typeof(string));
    
            var aCTypeParameter = aCType != null ?
                new ObjectParameter("ACType", aCType) :
                new ObjectParameter("ACType", typeof(string));
    
            var enabledParameter = enabled.HasValue ?
                new ObjectParameter("Enabled", enabled) :
                new ObjectParameter("Enabled", typeof(bool));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetFilteredRoomsByModeAndDate_Result>("GetFilteredRoomsByModeAndDate", modeParameter, roomTypeParameter, bedTypeParameter, aCTypeParameter, enabledParameter, startDateParameter, endDateParameter);
        }
    
        public virtual int DeleteABooking(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteABooking", iDParameter);
        }
    
        public virtual ObjectResult<GetAllBookings_Result> GetAllBookings()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllBookings_Result>("GetAllBookings");
        }
    
        public virtual ObjectResult<GetAllCurrentBookings_Result> GetAllCurrentBookings()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllCurrentBookings_Result>("GetAllCurrentBookings");
        }
    
        public virtual ObjectResult<GetAllFutureBookings_Result> GetAllFutureBookings()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllFutureBookings_Result>("GetAllFutureBookings");
        }
    
        public virtual ObjectResult<GetAllPastBookings_Result> GetAllPastBookings()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllPastBookings_Result>("GetAllPastBookings");
        }
    
        public virtual ObjectResult<GetCurrentBookingsOfOneUser_Result> GetCurrentBookingsOfOneUser(string userID)
        {
            var userIDParameter = userID != null ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCurrentBookingsOfOneUser_Result>("GetCurrentBookingsOfOneUser", userIDParameter);
        }
    
        public virtual ObjectResult<GetFutureBookingsOfOneUser_Result> GetFutureBookingsOfOneUser(string userID)
        {
            var userIDParameter = userID != null ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetFutureBookingsOfOneUser_Result>("GetFutureBookingsOfOneUser", userIDParameter);
        }
    
        public virtual ObjectResult<GetPastBookingsOfOneUser_Result> GetPastBookingsOfOneUser(string userID)
        {
            var userIDParameter = userID != null ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetPastBookingsOfOneUser_Result>("GetPastBookingsOfOneUser", userIDParameter);
        }
    
        public virtual int UpdateABooking(Nullable<int> iD, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<int> bookedRoomId, string bookedUserId, Nullable<decimal> totalPrice)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var bookedRoomIdParameter = bookedRoomId.HasValue ?
                new ObjectParameter("BookedRoomId", bookedRoomId) :
                new ObjectParameter("BookedRoomId", typeof(int));
    
            var bookedUserIdParameter = bookedUserId != null ?
                new ObjectParameter("BookedUserId", bookedUserId) :
                new ObjectParameter("BookedUserId", typeof(string));
    
            var totalPriceParameter = totalPrice.HasValue ?
                new ObjectParameter("TotalPrice", totalPrice) :
                new ObjectParameter("TotalPrice", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateABooking", iDParameter, startDateParameter, endDateParameter, bookedRoomIdParameter, bookedUserIdParameter, totalPriceParameter);
        }
    
        public virtual int AddABooking(Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<int> bookedRoomId, string bookedUserId, Nullable<decimal> totalPrice)
        {
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var bookedRoomIdParameter = bookedRoomId.HasValue ?
                new ObjectParameter("BookedRoomId", bookedRoomId) :
                new ObjectParameter("BookedRoomId", typeof(int));
    
            var bookedUserIdParameter = bookedUserId != null ?
                new ObjectParameter("BookedUserId", bookedUserId) :
                new ObjectParameter("BookedUserId", typeof(string));
    
            var totalPriceParameter = totalPrice.HasValue ?
                new ObjectParameter("TotalPrice", totalPrice) :
                new ObjectParameter("TotalPrice", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddABooking", startDateParameter, endDateParameter, bookedRoomIdParameter, bookedUserIdParameter, totalPriceParameter);
        }
    
        public virtual ObjectResult<GetGroupedFilteredRoomsByModeAndDate_Result> GetGroupedFilteredRoomsByModeAndDate(Nullable<int> mode, string roomType, string bedType, string aCType, Nullable<bool> enabled, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var modeParameter = mode.HasValue ?
                new ObjectParameter("Mode", mode) :
                new ObjectParameter("Mode", typeof(int));
    
            var roomTypeParameter = roomType != null ?
                new ObjectParameter("RoomType", roomType) :
                new ObjectParameter("RoomType", typeof(string));
    
            var bedTypeParameter = bedType != null ?
                new ObjectParameter("BedType", bedType) :
                new ObjectParameter("BedType", typeof(string));
    
            var aCTypeParameter = aCType != null ?
                new ObjectParameter("ACType", aCType) :
                new ObjectParameter("ACType", typeof(string));
    
            var enabledParameter = enabled.HasValue ?
                new ObjectParameter("Enabled", enabled) :
                new ObjectParameter("Enabled", typeof(bool));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetGroupedFilteredRoomsByModeAndDate_Result>("GetGroupedFilteredRoomsByModeAndDate", modeParameter, roomTypeParameter, bedTypeParameter, aCTypeParameter, enabledParameter, startDateParameter, endDateParameter);
        }
    
        public virtual ObjectResult<GetRoomsByDetails_Result> GetRoomsByDetails(string roomType, string bedType, string aCType, Nullable<bool> enabled, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<decimal> price)
        {
            var roomTypeParameter = roomType != null ?
                new ObjectParameter("RoomType", roomType) :
                new ObjectParameter("RoomType", typeof(string));
    
            var bedTypeParameter = bedType != null ?
                new ObjectParameter("BedType", bedType) :
                new ObjectParameter("BedType", typeof(string));
    
            var aCTypeParameter = aCType != null ?
                new ObjectParameter("ACType", aCType) :
                new ObjectParameter("ACType", typeof(string));
    
            var enabledParameter = enabled.HasValue ?
                new ObjectParameter("Enabled", enabled) :
                new ObjectParameter("Enabled", typeof(bool));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var priceParameter = price.HasValue ?
                new ObjectParameter("Price", price) :
                new ObjectParameter("Price", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetRoomsByDetails_Result>("GetRoomsByDetails", roomTypeParameter, bedTypeParameter, aCTypeParameter, enabledParameter, startDateParameter, endDateParameter, priceParameter);
        }
    
        public virtual ObjectResult<GetBookingByID_Result> GetBookingByID(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetBookingByID_Result>("GetBookingByID", iDParameter);
        }
    }
}
